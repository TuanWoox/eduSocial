<% layout('layouts/indexboilerplate') -%> 
<div class="container">
    <a href="/posts/<%= post._id %>" class="btn btn-primary" style="width: auto;">Back to posts</a>
</div>
<div class="container mt-2" style="width: 80%;">     
    <h2>Edit Your Post</h2>     
    <form id="editForm" action="/posts/<%= post._id %>?_method=PUT" method="post" novalidate class="validated-form">         
        <div class="mb-3">             
            <label for="title" class="form-label"><h5>Tiêu đề của bài đăng</h5></label>             
            <input type="text" class="form-control" id="title" name="post[title]" required value="<%= post.title %>">                      
        </div>         
        <div class="mb-3">                        
            <label for="tags" class="form-label"><h5>Tags (cách nhau bằng dấu space)</h5></label>
            <input type="text" class="form-control" id="tags" name="post[tags]" required value="<%= post.tags.join(' ') %>">       
        </div>         
        <div class="mb-3">             
            <label for="content" class="form-label"><h5>Nội dung post</h5></label>             
            <textarea class="form-control" id="tinymce-content" name="post[content]" rows="5" required><%= post.content %></textarea>         
        </div>    
        <input type="hidden" name="newImages" id="newsImages">
        <input type="hidden" name="deletedImages" id="deletedImages">
        <button class="btn btn-success" type="submit" id="submit-button">Update </button>
    </form> 
</div>
<!-- Script element sourcing TinyMCE -->
<script type="application/javascript" src= "/tinymce/tinymce.min.js"></script>
<!-- Script element sourcing the TinyMCE configuration -->
<script type="application/javascript">
    let imagesToUploadBlob = []; // Array to keep images locally
    let imagesOfPost = <%- JSON.stringify(post.images) %>;  
    let deleteImages = [];
    

    tinymce.init({
        selector: 'textarea#tinymce-content',
        plugins: 'image link code table lists preview wordcount fullscreen emoticons',
        toolbar: 'undo redo | formatselect | bold italic underline | alignleft aligncenter alignright alignjustify | ' +
                 'bullist numlist outdent indent | link image | code preview fullscreen | emoticons',

        images_upload_handler: async function (blobInfo, progress) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onloadend = () => {
                    const blobUrl = URL.createObjectURL(blobInfo.blob());
                    imagesToUploadBlob.push({
                        blob: blobInfo.blob(),
                        url: blobUrl,
                    });
                    resolve(blobUrl); 
                };
                reader.onerror = () => reject({ message: 'Image upload failed' });
                reader.readAsDataURL(blobInfo.blob());
            });
        },
    });

    document.querySelector('#submit-button').addEventListener('click', async (evt) => {
    evt.preventDefault();
    const button = document.querySelector('#submit-button');
    button.disabled = true;
    let content = tinymce.activeEditor.getContent();

    try {
        // Make a list of all images in content
        const currentImagesInContent = Array.from(tinymce.activeEditor.getDoc().querySelectorAll('img')).map(img => img.src);

        // Filter out the ones that are still in content
        const imagesToUpload = imagesToUploadBlob.filter(image => currentImagesInContent.includes(image.url));

        // Check if any of the post images have been deleted
        imagesOfPost.forEach(image => {
            if (!currentImagesInContent.includes(image.url)) {
                deleteImages.push(image.filename); 
            }
        });

        // Upload to Cloudinary
        const uploadResults = await Promise.all(imagesToUpload.map(image => sendImageToCloud(image.blob)));

        // Replace Image URL (blob: source) to Cloudinary URL
        uploadResults.forEach((result, index) => {
            const { url, filename } = result;
            content = content.replace(imagesToUpload[index].url, url);
        });

        tinymce.activeEditor.setContent(content);

        // Set new uploaded images 
        const images = uploadResults.map(({ url, filename }) => ({ url, filename }));
        document.querySelector('#newsImages').value = JSON.stringify(images);

        // Set deleted images 
        document.querySelector('#deletedImages').value = JSON.stringify(deleteImages);

        document.querySelector('#editForm').submit();
        } catch (error) {
            console.error("Failed to upload image(s):", error);
        }
    });

    async function sendImageToCloud(imageBlob) {
        const url = '/api/imageHandler/upload';
        const formData = new FormData();
        formData.append('image', imageBlob, 'image.jpg');

        const response = await fetch(url, {
            method: 'POST',
            body: formData,
        });

        if (!response.ok) {
            throw new Error(`Server error: ${response.status}`);
        }
        const result = await response.json();
        return result;
    }
</script>