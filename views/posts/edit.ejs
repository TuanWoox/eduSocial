<% layout('layouts/indexboilerplate') -%> 
<div class="container mt-2" style="width: 80%;">     
    <h2>Chỉnh sửa bài viết của bạn</h2>     
    <form id="editForm" action="/posts/<%= post._id %>?_method=PUT" method="post" novalidate class="validated-form">         
        <div class="mb-3">             
            <label for="title" class="form-label"><h5>Tiêu đề của bài đăng</h5></label>             
            <input type="text" class="form-control" id="title" name="post[title]" required value="<%= post.title %>">                      
        </div>         
        <div class="mb-3">                        
            <label for="tags" class="form-label"><h5>Tags (cách nhau bằng dấu space)</h5></label>
            <input type="text" class="form-control" id="tags" name="post[tags]" required 
                value='<%= JSON.stringify(post.tags.map(tag => tag.name)) %>'>
        </div>         
        <div class="mb-3">             
            <label for="content" class="form-label"><h5>Nội dung bài viết</h5></label>             
            <textarea class="form-control" id="tinymce-content" name="post[content]" rows="5" required><%= post.content %></textarea>         
        </div>    
        <input type="hidden" name="newImages" id="newsImages">
        <input type="hidden" name="deletedImages" id="deletedImages">
        <div class="d-flex justify-content-between m-2">
            <a href="/posts/<%= post._id %>" class="btn btn-info">Hủy cập nhật</a>
            <button class="btn btn-success" type="submit" id="submit-button">Cập nhật </button>
        </div>
        

    </form> 
</div>
<!-- Script element sourcing TinyMCE -->
<script type="application/javascript" src= "/tinymce/tinymce.min.js"></script>
<!-- Script element sourcing the TinyMCE configuration -->
<script type="application/javascript">
    let imagesToUploadBlob = []; // Array to keep images locally
    let imagesOfPost = <%- JSON.stringify(post.images) %>;  
    let deleteImages = [];
    

    tinymce.init({
        selector: 'textarea#tinymce-content',
        plugins: 'image link code table lists preview wordcount fullscreen emoticons',
        toolbar: 'undo redo | formatselect | bold italic underline | alignleft aligncenter alignright alignjustify | ' +
                 'bullist numlist outdent indent | link image | code preview fullscreen | emoticons',

        images_upload_handler: async function (blobInfo, progress) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onloadend = () => {
                    const blobUrl = URL.createObjectURL(blobInfo.blob());
                    imagesToUploadBlob.push({
                        blob: blobInfo.blob(),
                        url: blobUrl,
                    });
                    resolve(blobUrl); 
                };
                reader.onerror = () => reject({ message: 'Image upload failed' });
                reader.readAsDataURL(blobInfo.blob());
            });
        },
    });

    document.querySelector('#submit-button').addEventListener('click', async (evt) => {
    evt.preventDefault();
    const button = document.querySelector('#submit-button');
    button.disabled = true;
    let content = tinymce.activeEditor.getContent();

    try {
        // Make a list of all images in content
        const currentImagesInContent = Array.from(tinymce.activeEditor.getDoc().querySelectorAll('img')).map(img => img.src);

        // Filter out the ones that are still in content
        const imagesToUpload = imagesToUploadBlob.filter(image => currentImagesInContent.includes(image.url));

        // Check if any of the post images have been deleted
        imagesOfPost.forEach(image => {
            if (!currentImagesInContent.includes(image.url)) {
                deleteImages.push(image.filename); 
            }
        });

        // Upload to Cloudinary
        const uploadResults = await Promise.all(imagesToUpload.map(image => sendImageToCloud(image.blob)));

        // Replace Image URL (blob: source) to Cloudinary URL
        uploadResults.forEach((result, index) => {
            const { url, filename } = result;
            content = content.replace(imagesToUpload[index].url, url);
        });

        tinymce.activeEditor.setContent(content);

        // Set new uploaded images 
        const images = uploadResults.map(({ url, filename }) => ({ url, filename }));
        document.querySelector('#newsImages').value = JSON.stringify(images);

        // Set deleted images 
        document.querySelector('#deletedImages').value = JSON.stringify(deleteImages);

        document.querySelector('#editForm').submit();
        } catch (error) {
            console.error("Failed to upload image(s):", error);
        }
    });

    async function sendImageToCloud(imageBlob) {
        const url = '/api/imageHandler/upload';
        const formData = new FormData();
        formData.append('image', imageBlob, 'image.jpg');

        const response = await fetch(url, {
            method: 'POST',
            body: formData,
        });

        if (!response.ok) {
            throw new Error(`Server error: ${response.status}`);
        }
        const result = await response.json();
        return result;
    }
</script>
<script src="https://cdn.jsdelivr.net/npm/@yaireo/tagify@4.4.0/dist/tagify.min.js"></script>
<script>
    const tagInputElement = document.querySelector("#tags");

    const tagify = new Tagify(tagInputElement, {
        whitelist: [],
        dropdown: {
            enabled: 0,
            closeOnSelect: true
        }
    });

    // Fetch tags immediately when the page loads
    async function fetchInitialTags() {
        try {
            const response = await fetch('/tags/suggest?letter=');
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

            const arrayTags = await response.json();
            console.log('Initial fetched tags:', arrayTags);

            // Update the Tagify whitelist
            tagify.whitelist = arrayTags.map(tag => tag.name);
        } catch (error) {
            console.error('Error fetching initial tags:', error);
        }
    }

    // Fetch tags on page load
    window.addEventListener('load', fetchInitialTags);

    // Fetch tags on change
    tagInputElement.addEventListener('change', async (e) => {
        const query = e.target.value.trim();
        console.log('Input query:', query);

        if (query.length > 0) {
            try {
                const response = await fetch(`/tags/suggest?letter=${query}`);
                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

                const arrayTags = await response.json();
                console.log('Fetched tags on change:', arrayTags);

                // Update the Tagify whitelist
                tagify.whitelist = arrayTags.map(tag => tag.name);
                tagify.dropdown.show(query); // Show the suggestions dropdown
            } catch (error) {
                console.error('Error fetching tag suggestions on change:', error);
            }
        }
    });
</script>