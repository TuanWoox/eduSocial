<% layout('layouts/indexboilerplate') -%>
<div class="container mt-2" style="width: 80%;">
    <h2>Hỏi đáp thắc mắc của bạn</h2>
    <form id="questionForm" action="/questions/create" method="post" novalidate class="validated-form">
        <div class="mb-3">
            <label for="title" class="form-label">Tiêu đề câu hỏi</label>
            <input type="text" class="form-control" id="title" name="question[title]" required>
            <div class="valid-feedback">
                Looks good!
            </div>
        </div>
        <div class="mb-3">
            <label for="body" class="form-label">Nội dung câu hỏi</label>
            <textarea class="form-control" id="body" name="question[body]" rows="10" required></textarea>
            <div class="valid-feedback">
                Looks good!
            </div>
        </div>
        <div class="mb-3">
            <label for="tags" class="form-label">Tags (cách nhau bằng dấu tab)</label>
            <input type="text" class="form-control" id="tags" name="question[tags]" required>
            <div class="valid-feedback">
                Looks good!
            </div>
        </div>
        <button type="submit" class="btn btn-primary">Gửi câu hỏi</button>
    </form>
</div>
<script src="https://cdn.jsdelivr.net/npm/@yaireo/tagify@4.4.0/dist/tagify.min.js"></script>
<script>
    const tagInputElement = document.querySelector("#tags");

    const tagify = new Tagify(tagInputElement, {
        whitelist: [],
        dropdown: {
            enabled: 0,
            closeOnSelect: true
        }
    });

    // Fetch tags immediately when the page loads
    async function fetchInitialTags() {
        try {
            const response = await fetch('/tags/suggest?letter=');
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

            const arrayTags = await response.json();
            console.log('Initial fetched tags:', arrayTags);

            // Update the Tagify whitelist
            tagify.whitelist = arrayTags.map(tag => tag.name);
        } catch (error) {
            console.error('Error fetching initial tags:', error);
        }
    }

    // Fetch tags on page load
    window.addEventListener('load', fetchInitialTags);

    // Fetch tags on change
    tagInputElement.addEventListener('change', async (e) => {
        const query = e.target.value.trim();
        console.log('Input query:', query);

        if (query.length > 0) {
            try {
                const response = await fetch(`/tags/suggest?letter=${query}`);
                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

                const arrayTags = await response.json();
                console.log('Fetched tags on change:', arrayTags);

                // Update the Tagify whitelist
                tagify.whitelist = arrayTags.map(tag => tag.name);
                tagify.dropdown.show(query); // Show the suggestions dropdown
            } catch (error) {
                console.error('Error fetching tag suggestions on change:', error);
            }
        }
    });
</script>
